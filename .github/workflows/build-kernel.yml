name: Build Kernel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v3
        with:
          repository: OnePlusOSS/android_kernel_oneplus_sm8650
          ref: oneplus/sm8650_v_15.0.0_oneplus_ace5
          path: kernel_workspace/android-kernel

      - name: Checkout vendor modules
        uses: actions/checkout@v3
        with:
          repository: OnePlusOSS/android_kernel_modules_and_devicetree_oneplus_sm8650
          path: kernel_workspace/vendor-modules

      - name: Copy vendor/oplus/kernel/cpu to kernel source
        run: |
          mkdir -p kernel_workspace/android-kernel/vendor/oplus/kernel
          cp -r kernel_workspace/vendor-modules/vendor/oplus/kernel/cpu kernel_workspace/android-kernel/vendor/oplus/kernel/

      - name: Fix symlink for kernel/oplus_cpu
        run: |
          cd kernel_workspace/android-kernel/kernel
          rm -rf oplus_cpu
          ln -s ../../../vendor/oplus/kernel/cpu oplus_cpu

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses-dev bison flex libssl-dev bc ccache

      - name: Set up Clang
        run: |
          mkdir -p kernel_workspace/clang-aosp
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master-kernel-build-2022/clang-r450784e.tar.gz -O clang.tar.gz
          tar -xzf clang.tar.gz -C kernel_workspace/clang-aosp
          rm clang.tar.gz

      - name: Set up GCC
        run: |
          mkdir -p kernel_workspace/gcc-64 kernel_workspace/gcc-32
          wget https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/heads/master.tar.gz -O gcc-64.tar.gz
          wget https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/heads/master.tar.gz -O gcc-32.tar.gz
          tar -xzf gcc-64.tar.gz -C kernel_workspace/gcc-64
          tar -xzf gcc-32.tar.gz -C kernel_workspace/gcc-32
          rm gcc-64.tar.gz gcc-32.tar.gz

      - name: Build kernel
        run: |
          cd kernel_workspace/android-kernel
          export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
          export KBUILD_BUILD_HOST=Github-Action
          export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
          make -j$(nproc --all) CC=clang O=out ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- LD=ld.lld CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/aarch64-linux-android- CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/arm-linux-androideabi- gki_defconfig
          if [ "${{ env.ENABLE_CCACHE }}" = "true" ]; then
              make -j$(nproc --all) CC="ccache clang" O=out ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- LD=ld.lld CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/aarch64-linux-android- CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/arm-linux-androideabi-
          else
              make -j$(nproc --all) CC=clang O=out ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- LD=ld.lld CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/aarch64-linux-android- CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/arm-linux-androideabi-
          fi

    env:
      ENABLE_CCACHE: true
      ARCH: arm64
      KERNEL_CONFIG: gki_defconfig
      GCC_64: CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/aarch64-linux-android-
      GCC_32: CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/arm-linux-androideabi-
      CLANG_TRIPLE: aarch64-linux-gnu-
      LD: ld.lld
